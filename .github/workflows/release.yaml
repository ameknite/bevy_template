name: Release

# Configure your build and release platforms
env:
  # If your repo name differs from your binary name, change it.
  # Check you Cargo.toml -> package -> name
  binary: ${{ github.event.repository.name }}

  # Build platforms

  # Valid platforms: wasm(webgl,webgpu), linux, windows, macos(intel,apple)
  # - Write "intel" or "apple" to build for "macos_intel" or "macos_apple_silicon," respectively.
  # - Write "macos" to build for both "intel" and "apple"
  # - Write "webgl" or "webgpu" to build for "webgl" or "webgpu" respectively.
  # - Write "web" or "wasm" to build for webgl
  build_for: web, linux, windows, macos

  # WASM configuration
  optimize_wasm: true

  # Releases

  # Valid platforms: "github_releases, itchio, github_pages"
  # - For brevity you can write: "releases, itchio, pages"
  plublish_to: releases

  # Itch.io configuration

  # itchio_target is REQUIRED for publish to itch.io to work.
  itchio_target: #<user>/<your-game>
  # Example of itchio_target: cart/build-a-better-buddy
  # Check the url of your game page in itch.io

  # Publish configuration
  # Valid apis: (webgl|webgpu)
  web_graphic_api: webgl

permissions:
  # To upload files to GitHub Releases
  contents: write
  # To deploy to Pages
  pages: write
  # To verify the deployment originates from an appropriate source
  id-token: write

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Add tag version: (e.g. -> v3.6.1)"
        required: true
        type: string
      build_for:
        description: "Build for:"
        default: web,linux,windows,macos
      publish_to:
        description: "Publish to:"
        default: releases,itchio,pages
      optimize_wasm:
        description: 'Optimize wasm'
        type: boolean
        default: true
      web_graphic_api:
          description: 'Graphic API'
          type: choice
          default: webgl
          options: 
              - webgl
              - webgpu
      itchio_target:
        description: "Itchio target: <user>/<your-game>"
        type: string

jobs:
  # Load variables
  load-env:
    runs-on: ubuntu-latest
    steps:
      - id: get_version
        uses: olegtarasov/get-tag@v2.1.2

    outputs:
      run_build_webgl: ${{ ( inputs.tag &&  (contains(inputs.build_for, 'web') || contains(inputs.build_for, 'wasm') || contains(inputs.build_for, 'wegbl')) ) || ( !inputs.tag && (contains(env.build_for, 'web') || contains(env.build_for, 'wasm') || contains(inputs.build_for, 'wegbl'))  ) }}
      run_build_webgpu: ${{ ( inputs.tag &&  contains(inputs.build_for, 'webgpu') ) || ( !inputs.tag && contains(env.build_for, 'webgpu' ) ) }}
      run_build_linux: ${{ (inputs.tag && contains(inputs.build_for, 'linux')) || (!inputs.tag && contains(env.build_for, 'linux') ) }}
      run_build_windows: ${{ ( inputs.tag && contains(inputs.build_for, 'windows')) || (!inputs.tag && contains(env.build_for, 'windows') ) }}
      run_build_macos_intel:  ${{ ( inputs.tag && ( contains(inputs.build_for, 'intel') || contains(inputs.build_for, 'macos') )) || (!inputs.tag && (contains(env.build_for, 'intel') || contains(env.build_for, 'macos')) ) }}
      run_build_macos_apple_silicon: ${{ ( inputs.tag && ( contains(inputs.build_for, 'apple') || contains(inputs.build_for, 'macos') )) || (!inputs.tag && (contains(env.build_for, 'apple') || contains(env.build_for, 'macos')) ) }}
      run_publish_github_releases: ${{ ( inputs.tag && contains(inputs.publish_to, 'releases')) || (!inputs.tag && contains(env.publish_to, 'releases') ) }}
      run_publish_itchio: ${{ ( inputs.tag && contains(inputs.publish_to, 'itchio')) || (!inputs.tag && contains(env.publish_to, 'itchio') ) }}
      run_publish_github_pages: ${{ ( inputs.tag && contains(inputs.publish_to, 'pages')) || (!inputs.tag && contains(env.publish_to, 'pages') ) }}
      itchio_target: ${{ inputs.itchio_target || env.itchio_target }}
      tag: ${{ ( inputs.tag || steps.get_version.outputs.tag ) }}
      binary: ${{ env.binary }}
      optimize_wasm: ${{(inputs.tag && inputs.optimize_wasm) || (!inputs.tag && env.optimize_wasm)}}
      web_graphic_api: ${{(inputs.tag && inputs.web_graphic_api) || (!inputs.tag && env.web_graphic_api)}}

  # Build for Web/WASM
  build-web:
    needs: load-env
    if: needs.load-env.outputs.run_build_webgl == 'true'
    uses: ./.github/workflows/web.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}
      web_graphic_api: ${{ needs.load-env.outputs.web_graphic_api }}
      optimize_wasm: ${{ needs.load-env.outputs.optimize_wasm }}
      run_build_webgl: ${{ needs.load-env.outputs.run_build_webgl }}
      run_build_webgpu: ${{ needs.load-env.outputs.run_build_webgpu }}
      run_publish_github_pages: ${{ needs.load-env.outputs.run_publish_github_pages }}

  # Build for Linux x86_64
  build-linux:
    needs: load-env
    if: needs.load-env.outputs.run_build_linux == 'true'
    uses: ./.github/workflows/linux.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}

  # Build for Windows x86_64
  build-windows:
    needs: load-env
    if: needs.load-env.outputs.run_build_windows == 'true'
    uses: ./.github/workflows/windows.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}


  # Build for MacOS x86_64/ARM64
  build-macos:
    needs: load-env
    if: needs.load-env.outputs.run_build_macos_intel == 'true' || needs.load-env.outputs.run_build_macos_apple_silicon == 'true'
    uses: ./.github/workflows/macos.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}
      run_macos_intel: ${{ needs.load-env.outputs.run_build_macos_intel }}
      run_macos_apple_silicon: ${{ needs.load-env.outputs.run_build_macos_apple_silicon }}


  # Release binaries in GitHub
  publish-github-releases:
    needs:
      - load-env
      - build-web
      - build-linux
      - build-windows
      - build-macos
    if: ${{ always() && !failure() && !cancelled() && needs.load-env.outputs.run_publish_github_releases == 'true'}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact_name: web
            os: ubuntu-latest
          - artifact_name: linux
            os: ubuntu-latest
          - artifact_name: windows
            os: windows-latest
          - artifact_name: macos_apple_silicon
            os: macos-latest
          - artifact_name: macos_intel
            os: macos-latest
    uses: ./.github/workflows/github_releases.yaml
    name: publish / github-releases
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      os: ${{ matrix.os }}
      artifact_name: ${{ matrix.artifact_name }}
    secrets: inherit

  # Publish to Itch.io
  publish-itchio:
    needs:
      - load-env
      - build-web
      - build-linux
      - build-windows
      - build-macos
    if: ${{ always() && !failure() && !cancelled() && needs.load-env.outputs.run_publish_itchio == 'true' && needs.load-env.outputs.itchio_target != '' }}
    uses: ./.github/workflows/itchio.yaml
    name: publish
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      itchio_target: ${{ needs.load-env.outputs.itchio_target }}
    secrets: inherit

  # Publish to GitHub Pages
  publish-github-pages:
    needs:
      - load-env
      - build-web
    if: ${{ needs.load-env.outputs.run_publish_github_pages == 'true' }}
    uses: ./.github/workflows/github_pages.yaml
    name: publish