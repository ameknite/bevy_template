name: Release_wgpu

# Configure your build and release platforms
env:
  # If your repo name differs from your binary name, change it.
  # Check you Cargo.toml -> package -> name
  binary: ${{ github.event.repository.name }} 

  # Build platforms
  # Valid platforms: wasm(webgl,webgpu), linux, windows, macos(intel,apple)
  build_for: "webgl, linux, windows, macos"

  # WASM configuration
  optimize_wasm: true

  # Releases
  # Valid platforms: releases(github_releases), itchio, pages(github_pages)
  plublish_to: "github_releases, itchio, github_pages"
  
  # Itch.io configuration
  # itchio_target is REQUIRED for publish to itch.io to work.
  itchio_target: amknite/bevy-game
  # Example of itchio_target: cart/build-a-better-buddy
  # Check the url of your game page in itch.io

  # Github pages configuration
  # Valid apis: (webgl|webgpu)
  web_graphic_api: webgl

permissions:
  contents: write

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Add tag version: (e.g. -> v3.6.1)'
        required: true
        type: string
      build_for:
        description: 'Platforms to Build:'
        default: webgl,linux,windows,macos
      publish_to:
        description: 'Platforms to Publish:'
        default: releases,itchio,pages
      optimize_wasm:
        description: 'Optimize wasm'
        type: boolean
      web_graphic_api:
          description: 'Graphic API for GitHub pages'
          type: choice
          default: webgl
          options: 
              - webgl
              - webgpu
      itchio_target:
        description: 'Itchio target: <user>/<your-game>'
        type: string

jobs:
  load-env:
    runs-on: ubuntu-latest
    steps:
      - id: get_version
        uses: olegtarasov/get-tag@v2.1.2

    outputs:
      run_build_wasm_webgl: ${{( inputs.tag &&  (contains(inputs.build_for, 'webgl') || contains(inputs.build_for, 'wasm')) ) || ( !inputs.tag && (contains(env.build_for, 'webgl') || contains(env.build_for, 'wasm')) )}}
      run_build_wasm_webgpu: ${{(inputs.tag && (contains(inputs.build_for, 'webgpu') || contains(inputs.build_for, 'wasm')) ) || ( !inputs.tag && (contains(env.build_for, 'webgpu') || contains(env.build_for, 'wasm')) )}}
      run_build_linux: ${{(inputs.tag && contains(inputs.build_for, 'linux')) || (!inputs.tag && contains(env.build_for, 'linux') )}}
      run_build_windows: ${{( inputs.tag && contains(inputs.build_for, 'windows')) || (!inputs.tag && contains(env.build_for, 'windows') )}}
      run_build_macos_intel: ${{( inputs.tag && (contains(inputs.build_for, 'intel') || contains(inputs.build_for, 'macos')) ) || (!inputs.tag && (contains(env.build_for, 'intel') || contains(env.build_for, 'macos')) )}}
      run_build_macos_apple_silicon: ${{(inputs.tag && ( contains(inputs.build_for, 'apple') || contains(inputs.build_for, 'macos') )) || (!inputs.tag && (contains(env.build_for, 'apple') || contains(env.build_for, 'macos')))}}
      run_publish_github_releases: ${{(inputs.tag && contains(inputs.publish_to, 'releases')) || (!inputs.tag && contains(env.plublish_to, 'releases'))}}
      run_publish_itchio: ${{(inputs.tag && contains(inputs.publish_to, 'itchio')) || (!inputs.tag && contains(env.plublish_to, 'itchio'))}}
      run_publish_github_pages: ${{(inputs.tag && contains(inputs.publish_to, 'pages')) || (!inputs.tag && contains(env.plublish_to, 'pages'))}}
      itchio_target: ${{inputs.itchio_target || env.itchio_target}}
      tag: ${{(inputs.tag || steps.get_version.outcome.tag)}}
      optimize_wasm: ${{(inputs.tag && inputs.optimize_wasm) || (!inputs.tag && env.optimize_wasm)}}
      web_graphic_api: ${{(inputs.tag && inputs.web_graphic_api) || (!inputs.tag && env.web_graphic_api)}}


    # Build for WASM WebGL
  build-wasm-webgl:
    runs-on: ubuntu-latest
    needs: load-env
    if: needs.load-env.outputs.run_build_wasm_webgl == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli
      
      - name: install wasm-opt
        if: needs.load-env.outputs.optimize_wasm == 'true'
        run: | 
          cargo install wasm-opt

      - name: Build
        run: |
          cargo build --release --target wasm32-unknown-unknown

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name bevy_game --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ env.binary }}.wasm
          cp -r assets wasm/

      - name: Optimize wasm
        if: needs.load-env.outputs.optimize_wasm == 'true'
        run: |
          wasm-opt -Oz --output wasm/bevy_game_bg.wasm wasm/bevy_game_bg.wasm

      - name: Package as a zip
        working-directory: ./wasm
        run: |
          zip --recurse-paths ../${{env.binary}}_${{ needs.load-env.outputs.tag }}_wasm_webgl.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}_${{ needs.load-env.outputs.tag }}_wasm_webgl.zip
          name: wasm_webgl
          retention-days: 1

  # Build for WASM WebGPU
  build-wasm-webgpu:
    runs-on: ubuntu-latest
    needs: load-env
    if: needs.load-env.outputs.run_build_wasm_webgpu == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli
        
      - name: install wasm-opt
        if: needs.load-env.outputs.optimize_wasm == 'true'
        run: | 
          cargo install wasm-opt

      - name: Build
        run: |
          RUSTFLAGS="--cfg=web_sys_unstable_apis" cargo build --release --target wasm32-unknown-unknown --no-default-features --features "webgpu"

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name bevy_game --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ env.binary }}.wasm
          cp -r assets wasm/

      - name: Optimize wasm
        if: needs.load-env.outputs.optimize_wasm == 'true'
        run: |
          wasm-opt -Oz --output wasm/bevy_game_bg.wasm wasm/bevy_game_bg.wasm

      - name: Package as a zip
        working-directory: ./wasm
        run: |
          zip --recurse-paths ../${{env.binary}}_${{ needs.load-env.outputs.tag }}_wasm_webgpu.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}_${{ needs.load-env.outputs.tag }}_wasm_webgpu.zip
          name: wasm_webgpu
          retention-days: 1

  # Build for Linux x86_64
  build-linux:
    runs-on: ubuntu-latest
    needs: load-env
    if: needs.load-env.outputs.run_build_linux == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}_${{ needs.load-env.outputs.tag }}_linux.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}_${{ needs.load-env.outputs.tag }}_linux.zip
          name: linux
          retention-days: 1

  # Build for Windows x86_64
  build-windows:
    runs-on: windows-latest
    needs: load-env
    if: needs.load-env.outputs.run_build_windows == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          cp -r assets windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath "${{ env.binary }}_${{ needs.load-env.outputs.tag }}_windows.zip"

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}_${{ needs.load-env.outputs.tag }}_windows.zip
          name: windows
          retention-days: 1

  # Build for MacOS x86_64
  build-macos-intel:
    runs-on: macos-latest
    needs: load-env
    if: needs.load-env.outputs.run_build_macos_intel== 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.binary}} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.binary}}" -srcfolder ${{ env.binary }}.app ${{ env.binary}}_${{ needs.load-env.outputs.tag }}_macos_intel.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{env.binary}}_${{ needs.load-env.outputs.tag }}_macos_intel.dmg
          name: macos_intel
          retention-days: 1

  # Build for MacOS Apple Silicon
  build-macos-apple-silicon:
    runs-on: macos-latest
    needs: load-env
    if: needs.load-env.outputs.run_build_macos_apple_silicon == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Environment
        # macos 11 was the first version to support ARM
        run: |
          export MACOSX_DEPLOYMENT_TARGET="11"

      - name: Build
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{env.binary }}_${{ needs.load-env.outputs.tag }}_macos_apple_silicon.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}_${{ needs.load-env.outputs.tag }}_macos_apple_silicon.dmg
          name: macos_apple_silicon
          retention-days: 1

  # Release binaries in github
  publish_github_releases:
    name: Release for ${{ matrix.artifact_name }}
    needs: 
      - load-env
      - build-wasm-webgl
      - build-wasm-webgpu
      - build-linux 
      - build-windows
      - build-macos-apple-silicon
      - build-macos-intel
    if: ${{ always() && !failure() && !cancelled() && needs.load-env.outputs.run_publish_github_releases == 'true'}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact_name: wasm_webgl
            os: ubuntu-latest
          - artifact_name: wasm_webgpu
            os: ubuntu-latest
          - artifact_name: linux
            os: ubuntu-latest
          - artifact_name: windows
            os: windows-latest
          - artifact_name: macos_apple_silicon
            os: macos-latest
          - artifact_name: macos_intel
            os: macos-latest

    runs-on: ${{matrix.os}}
    steps:      
      - uses: xSAVIKx/artifact-exists-action@v0
        id: check_artifact
        with:
         name: ${{ matrix.artifact_name }}

      # check for zip or dmg file
      - uses: haya14busa/action-cond@v1
        if: steps.check_artifact.outputs.exists == 'true'
        id: condval
        with:
          cond: ${{ matrix.os == 'macos-latest' }}
          if_true: "dmg"
          if_false: "zip"

      - name: Download artifacts
        if: steps.check_artifact.outputs.exists == 'true'
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.artifact_name}}

      - name: Upload artifact to release
        if: steps.check_artifact.outputs.exists == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{env.binary}}_${{ needs.load-env.outputs.tag }}_${{ matrix.artifact_name }}.${{ steps.condval.outputs.value }}
          asset_name: ${{ env.binary }}_${{ needs.load-env.outputs.tag }}_${{ matrix.artifact_name }}.${{ steps.condval.outputs.value }}
          tag: ${{ needs.load-env.outputs.tag }}
          overwrite: true

  # Publish to itch.io
  publish_itchio:
    runs-on: ubuntu-latest
    needs: 
      - load-env
      - build-wasm-webgl
      - build-wasm-webgpu
      - build-linux 
      - build-windows
      - build-macos-apple-silicon
      - build-macos-intel
    if: ${{ always() && !failure() && !cancelled() && needs.load-env.outputs.run_publish_itchio == 'true' && needs.load-env.outputs.itchio_target != ''}}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./builds

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
          
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version

      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ needs.load-env.outputs.tag }}" \
                builds/$channel/* \
                ${{ inputs.itchio_target || env.itchio_target }}:$channel
          done

  # Publish to github page
  publish_github_pages:
    runs-on: ubuntu-latest
    needs: 
      - load-env
      - build-wasm-webgl
      - build-wasm-webgpu
    if: ${{ always() && !failure() && !cancelled() && needs.load-env.outputs.run_publish_github_pages == 'true'  }}
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm_${{ needs.load-env.outputs.web_graphic_api }}

      - name: Unzip artifact
        run: |
          unzip ./${{ env.binary }}_${{ needs.load-env.outputs.tag }}_wasm_${{ needs.load-env.outputs.web_graphic_api }}.zip -d web

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: web
          branch: gh-pages